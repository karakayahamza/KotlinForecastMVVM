Index: app/src/main/java/com/example/kotlinweatherforecast/data/api/WeatherApi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.data.api\r\n\r\nimport com.example.kotlinweatherforecast.data.model.WeatherModel\r\nimport retrofit2.http.GET\r\nimport retrofit2.http.Query\r\n    interface WeatherApi {\r\n        @GET(\"forecast?\")\r\n        fun getData(\r\n            @Query(\"q\") name: String?,\r\n            @Query(\"APPID\") appId: String?,\r\n            @Query(\"units\") units : String?\r\n        ): io.reactivex.Observable<WeatherModel>\r\n    }
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/data/api/WeatherApi.kt b/app/src/main/java/com/example/kotlinweatherforecast/data/api/WeatherApi.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/data/api/WeatherApi.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/data/api/WeatherApi.kt	(date 1695746274247)
@@ -4,7 +4,7 @@
 import retrofit2.http.GET
 import retrofit2.http.Query
     interface WeatherApi {
-        @GET("forecast?")
+        @GET("forecast?&lang=tr")
         fun getData(
             @Query("q") name: String?,
             @Query("APPID") appId: String?,
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    id 'com.android.application'\r\n    id 'kotlin-android'\r\n    id 'kotlin-android-extensions'\r\n}\r\n\r\nandroid {\r\n    compileSdk 32\r\n\r\n    defaultConfig {\r\n        configurations.all {\r\n            resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }\r\n        }\r\n\r\n        applicationId \"com.example.kotlinforecast\"\r\n        minSdk 26\r\n        targetSdk 32\r\n        versionCode 1\r\n        versionName \"1.0\"\r\n\r\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            minifyEnabled false\r\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility JavaVersion.VERSION_1_8\r\n        targetCompatibility JavaVersion.VERSION_1_8\r\n    }\r\n    kotlinOptions {\r\n        jvmTarget = '1.8'\r\n    }\r\n    buildFeatures {\r\n        viewBinding  true\r\n    }\r\n}\r\ndef retrofitVersion = '2.9.0'\r\ndef rxJavaVersion = '2.1.1'\r\ndef lifecycle_version = \"2.6.0-alpha01\"\r\ndef nav_version = \"2.5.1\"\r\n\r\ndependencies {\r\n    implementation 'androidx.core:core-ktx:1.9.0'\r\n    implementation 'androidx.appcompat:appcompat:1.5.1'\r\n    implementation 'com.google.android.material:material:1.6.1'\r\n    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'\r\n    implementation 'androidx.legacy:legacy-support-v4:1.0.0'\r\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'\r\n    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'\r\n    implementation 'androidx.test:core-ktx:1.5.0'\r\n    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'\r\n    implementation 'com.google.android.libraries.places:places:2.5.0'\r\n    testImplementation 'junit:junit:'\r\n    androidTestImplementation 'androidx.test.ext:junit:1.1.4'\r\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'\r\n\r\n    implementation \"com.squareup.retrofit2:retrofit:$retrofitVersion\"\r\n    implementation \"com.squareup.retrofit2:converter-gson:$retrofitVersion\"\r\n    implementation \"com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion\"\r\n\r\n    implementation \"io.reactivex.rxjava2:rxjava:$rxJavaVersion\"\r\n    implementation \"io.reactivex.rxjava2:rxandroid:$rxJavaVersion\"\r\n    implementation 'androidx.recyclerview:recyclerview:1.2.1'\r\n\r\n    implementation 'androidx.room:room-common:2.4.3'\r\n\r\n    implementation 'com.github.bumptech.glide:glide:4.14.2'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'\r\n\r\n    //noinspection GradleDependency\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\")\r\n    //noinspection GradleDependency\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-compose:$lifecycle_version\")\r\n    //noinspection GradleDependency\r\n    implementation(\"androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version\")\r\n\r\n    implementation \"android.arch.lifecycle:extensions:1.1.1\"\r\n    implementation \"android.arch.lifecycle:viewmodel:1.1.1\"\r\n\r\n    //noinspection GradleDependency\r\n    implementation \"androidx.navigation:navigation-fragment-ktx:$nav_version\"\r\n    //noinspection GradleDependency\r\n    implementation \"androidx.navigation:navigation-ui-ktx:$nav_version\"\r\n\r\n    implementation \"androidx.viewpager2:viewpager2:1.0.0\"\r\n\r\n    // glide\r\n    implementation 'com.github.bumptech.glide:glide:4.14.2'\r\n    annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'\r\n\r\n    implementation 'de.hdodenhof:circleimageview:3.1.0'\r\n\r\n\r\n    // Place\r\n    implementation 'com.google.android.gms:play-services-maps:18.1.0'\r\n    implementation 'com.google.android.gms:play-services-location:21.0.1'\r\n    implementation 'com.google.android.gms:play-services-places:17.0.0'\r\n    implementation 'com.google.android.libraries.places:places:3.0.0'\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle b/app/build.gradle
--- a/app/build.gradle	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/build.gradle	(date 1695746274241)
@@ -5,20 +5,26 @@
 }
 
 android {
-    compileSdk 32
+    compileSdk 34
 
     defaultConfig {
-        configurations.all {
+        configurations.configureEach {
             resolutionStrategy { force 'androidx.core:core-ktx:1.6.0' }
         }
 
         applicationId "com.example.kotlinforecast"
         minSdk 26
-        targetSdk 32
+        targetSdk 34
         versionCode 1
         versionName "1.0"
 
         testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
+
+
+        Properties properties = new Properties()
+        properties.load(project.rootProject.file("local.properties").newDataInputStream())
+        buildConfigField "String","API_KEY","\"${properties.getProperty("API_KEY")}\""
+
     }
 
     buildTypes {
@@ -37,6 +43,7 @@
     buildFeatures {
         viewBinding  true
     }
+    namespace 'com.example.kotlinweatherforecast'
 }
 def retrofitVersion = '2.9.0'
 def rxJavaVersion = '2.1.1'
@@ -44,19 +51,20 @@
 def nav_version = "2.5.1"
 
 dependencies {
-    implementation 'androidx.core:core-ktx:1.9.0'
-    implementation 'androidx.appcompat:appcompat:1.5.1'
-    implementation 'com.google.android.material:material:1.6.1'
+    implementation 'androidx.core:core-ktx:1.8.0'
+    implementation 'androidx.appcompat:appcompat:1.6.1'
+    implementation 'com.google.android.material:material:1.9.0'
     implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
     implementation 'androidx.legacy:legacy-support-v4:1.0.0'
-    implementation 'androidx.navigation:navigation-fragment-ktx:2.5.3'
-    implementation 'androidx.navigation:navigation-ui-ktx:2.5.3'
+    implementation 'androidx.navigation:navigation-fragment-ktx:2.7.3'
+    implementation 'androidx.navigation:navigation-ui-ktx:2.7.3'
     implementation 'androidx.test:core-ktx:1.5.0'
-    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.5.1'
-    implementation 'com.google.android.libraries.places:places:2.5.0'
+    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.6.2'
+    implementation 'com.google.android.libraries.places:places:3.2.0'
     testImplementation 'junit:junit:'
-    androidTestImplementation 'androidx.test.ext:junit:1.1.4'
-    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.0'
+    testImplementation 'junit:junit:4.13.2'
+    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
+    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
 
     implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
     implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
@@ -64,9 +72,9 @@
 
     implementation "io.reactivex.rxjava2:rxjava:$rxJavaVersion"
     implementation "io.reactivex.rxjava2:rxandroid:$rxJavaVersion"
-    implementation 'androidx.recyclerview:recyclerview:1.2.1'
+    implementation 'androidx.recyclerview:recyclerview:1.3.1'
 
-    implementation 'androidx.room:room-common:2.4.3'
+    implementation 'androidx.room:room-common:2.5.2'
 
     implementation 'com.github.bumptech.glide:glide:4.14.2'
     annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'
@@ -91,15 +99,4 @@
     // glide
     implementation 'com.github.bumptech.glide:glide:4.14.2'
     annotationProcessor 'com.github.bumptech.glide:compiler:4.14.2'
-
-    implementation 'de.hdodenhof:circleimageview:3.1.0'
-
-
-    // Place
-    implementation 'com.google.android.gms:play-services-maps:18.1.0'
-    implementation 'com.google.android.gms:play-services-location:21.0.1'
-    implementation 'com.google.android.gms:play-services-places:17.0.0'
-    implementation 'com.google.android.libraries.places:places:3.0.0'
-
-
 }
\ No newline at end of file
Index: app/src/main/java/com/example/kotlinweatherforecast/data/weatherRepository/WeatherRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.data.weatherRepository\r\n\r\nimport com.example.kotlinweatherforecast.data.api.WeatherApi\r\nimport com.example.kotlinweatherforecast.data.model.WeatherModel\r\nimport io.reactivex.Observable\r\n\r\nclass WeatherRepository(private val weatherApi: WeatherApi) {\r\n\r\n    fun getData(name: String, appId: String): Observable<WeatherModel> {\r\n        return weatherApi.getData(name, appId, \"metric\")\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/data/weatherRepository/WeatherRepository.kt b/app/src/main/java/com/example/kotlinweatherforecast/data/weatherRepository/WeatherRepository.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/data/weatherRepository/WeatherRepository.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/data/weatherRepository/WeatherRepository.kt	(date 1695746274253)
@@ -5,7 +5,6 @@
 import io.reactivex.Observable
 
 class WeatherRepository(private val weatherApi: WeatherApi) {
-
     fun getData(name: String, appId: String): Observable<WeatherModel> {
         return weatherApi.getData(name, appId, "metric")
     }
Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\r\n    package=\"com.example.kotlinweatherforecast\">\r\n\r\n    <uses-permission android:name=\"android.permission.INTERNET\" />\r\n    <uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\" />\r\n\r\n    <application\r\n        android:name=\"com.example.kotlinweatherforecast.network.InternetConnectivity\"\r\n        android:allowBackup=\"true\"\r\n        android:icon=\"@mipmap/ic_launcher\"\r\n        android:label=\"Weather Forecast\"\r\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\r\n        android:supportsRtl=\"true\"\r\n        android:theme=\"@style/NoActionBarStyle\">\r\n        <activity\r\n            android:name=\"com.example.kotlinweatherforecast.ui.activity.SplashScreenActivity\"\r\n            android:exported=\"true\" >\r\n            <intent-filter>\r\n                <action android:name=\"android.intent.action.MAIN\" />\r\n\r\n                <category android:name=\"android.intent.category.LAUNCHER\" />\r\n            </intent-filter>\r\n        </activity>\r\n        <activity\r\n            android:name=\"com.example.kotlinweatherforecast.ui.activity.MainActivity\"\r\n            android:exported=\"false\">\r\n        </activity>\r\n    </application>\r\n\r\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/AndroidManifest.xml b/app/src/main/AndroidManifest.xml
--- a/app/src/main/AndroidManifest.xml	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/AndroidManifest.xml	(date 1695746274260)
@@ -1,9 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.example.kotlinweatherforecast">
+<manifest xmlns:android="http://schemas.android.com/apk/res/android">
 
     <uses-permission android:name="android.permission.INTERNET" />
     <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
+    <uses-permission android:name="com.google.android.gms.permission.AD_ID"/>
 
     <application
         android:name="com.example.kotlinweatherforecast.network.InternetConnectivity"
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\r\nbuildscript {\r\n    repositories {\r\n        google()\r\n        mavenCentral()\r\n    }\r\n    dependencies {\r\n        classpath 'com.android.tools.build:gradle:7.4.2'\r\n        classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'\r\n\r\n        // NOTE: Do not place your application dependencies here; they belong\r\n        // in the individual module build.gradle files\r\n        \r\n    }\r\n\r\n}\r\n\r\ntask clean(type: Delete) {\r\n    delete rootProject.buildDir\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/build.gradle	(date 1695746274265)
@@ -5,7 +5,7 @@
         mavenCentral()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:7.4.2'
+        classpath 'com.android.tools.build:gradle:8.1.1'
         classpath 'org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.21'
 
         // NOTE: Do not place your application dependencies here; they belong
@@ -15,6 +15,6 @@
 
 }
 
-task clean(type: Delete) {
+tasks.register('clean', Delete) {
     delete rootProject.buildDir
 }
\ No newline at end of file
Index: gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>distributionBase=GRADLE_USER_HOME\r\ndistributionPath=wrapper/dists\r\ndistributionUrl=https\\://services.gradle.org/distributions/gradle-7.5-bin.zip\r\nzipStoreBase=GRADLE_USER_HOME\r\nzipStorePath=wrapper/dists\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
--- a/gradle/wrapper/gradle-wrapper.properties	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/gradle/wrapper/gradle-wrapper.properties	(date 1695746274271)
@@ -1,5 +1,5 @@
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-bin.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-8.0-bin.zip
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
Index: gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Project-wide Gradle settings.\r\n# IDE (e.g. Android Studio) users:\r\n# Gradle settings configured through the IDE *will override*\r\n# any settings specified in this file.\r\n# For more details on how to configure your build environment visit\r\n# http://www.gradle.org/docs/current/userguide/build_environment.html\r\n# Specifies the JVM arguments used for the daemon process.\r\n# The setting is particularly useful for tweaking memory settings.\r\norg.gradle.jvmargs=-Xmx2048m -Dfile.encoding=UTF-8\r\n# When configured, Gradle will run in incubating parallel mode.\r\n# This option should only be used with decoupled projects. More details, visit\r\n# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects\r\n# org.gradle.parallel=true\r\n# AndroidX package structure to make it clearer which packages are bundled with the\r\n# Android operating system, and which are packaged with your app\"s APK\r\n# https://developer.android.com/topic/libraries/support-library/androidx-rn\r\nandroid.useAndroidX=true\r\n# Automatically convert third-party libraries to use AndroidX\r\nandroid.enableJetifier=true\r\n# Kotlin code style for this project: \"official\" or \"obsolete\":\r\nkotlin.code.style=official
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/gradle.properties b/gradle.properties
--- a/gradle.properties	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/gradle.properties	(date 1695746274277)
@@ -18,4 +18,8 @@
 # Automatically convert third-party libraries to use AndroidX
 android.enableJetifier=true
 # Kotlin code style for this project: "official" or "obsolete":
-kotlin.code.style=official
\ No newline at end of file
+kotlin.code.style=official
+android.defaults.buildfeatures.buildconfig=true
+android.nonTransitiveRClass=false
+android.nonFinalResIds=false
+org.gradle.unsafe.configuration-cache=true
\ No newline at end of file
Index: app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/MainScreen.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.ui.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.AlertDialog\r\nimport android.content.Context\r\nimport android.content.SharedPreferences\r\nimport android.content.res.AssetManager\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport com.example.kotlinweatherforecast.ui.adapter.ViewPagerAdapter\r\nimport android.widget.*\r\nimport com.google.gson.Gson\r\nimport com.google.gson.reflect.TypeToken\r\nimport java.lang.reflect.Type\r\nimport com.example.kotlinweatherforecast.anim.ZoomOutPageTransformer\r\nimport androidx.appcompat.app.ActionBarDrawerToggle\r\nimport androidx.core.view.GravityCompat\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport androidx.viewpager.widget.ViewPager.*\r\nimport androidx.viewpager2.widget.ViewPager2\r\nimport com.example.kotlinweatherforecast.common.OnHymnClickListener\r\nimport com.example.kotlinweatherforecast.R\r\nimport com.example.kotlinweatherforecast.ui.adapter.CitiesRecyclerViewAdapter\r\nimport com.example.kotlinweatherforecast.ui.adapter.TempeturesRecyclerViewAdapter\r\nimport com.example.kotlinweatherforecast.common.onCliclLongRecyclerView\r\nimport com.example.kotlinweatherforecast.databinding.FragmentMainScreenBinding\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport org.json.JSONObject\r\nimport java.io.InputStream\r\nimport java.util.Locale\r\nimport kotlin.collections.ArrayList\r\n\r\n@Suppress(\"DEPRECATION\")\r\nclass MainScreen : Fragment() , OnHymnClickListener, onCliclLongRecyclerView {\r\n    private var _binding: FragmentMainScreenBinding? = null\r\n    private val binding get() = _binding!!\r\n    private val fragmentTagArg = \"tag\"\r\n    private lateinit var mCustomPagerAdapter: ViewPagerAdapter\r\n    private lateinit var  context: Context\r\n    private lateinit var  toggle : ActionBarDrawerToggle\r\n    private var arrayList = arrayListOf<String>()\r\n    private var place = ArrayList<String>()\r\n    private var recyclerViewAdapter1 : TempeturesRecyclerViewAdapter? = null\r\n    private var recyclerViewAdapter2 : CitiesRecyclerViewAdapter? = null\r\n    private var sharedPreferences : SharedPreferences? = null\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setHasOptionsMenu(true)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater,\r\n        container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentMainScreenBinding.inflate(inflater, container, false)\r\n        context = requireActivity().applicationContext\r\n        return binding.root\r\n    }\r\n\r\n    @SuppressLint(\"CommitPrefEdits\", \"CutPasteId\", \"ResourceAsColor\")\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        initViews()\r\n        setupViewPager()\r\n        setupSearchView()\r\n        setupToggle()\r\n        observeLiveData()\r\n    }\r\n\r\n    private fun initViews() {\r\n        mCustomPagerAdapter = ViewPagerAdapter(parentFragmentManager, fragmentTagArg)\r\n        binding.pager.adapter = mCustomPagerAdapter\r\n        binding.pager.setPageTransformer(true, ZoomOutPageTransformer())\r\n        binding.pager.offscreenPageLimit = 5\r\n\r\n        val layoutManager = LinearLayoutManager(requireContext())\r\n        val layoutManager2 = LinearLayoutManager(requireContext())\r\n\r\n        binding.navView.getHeaderView(0).apply {\r\n            findViewById<RecyclerView>(R.id.places_recyclerview).layoutManager = layoutManager\r\n            findViewById<RecyclerView>(R.id.filtered_place_recyclerview).layoutManager = layoutManager2\r\n            findViewById<SearchView>(R.id.placeName).isIconified = false\r\n        }\r\n\r\n        sharedPreferences = requireActivity().getSharedPreferences(\r\n            \"com.example.kotlinforecast.view\",\r\n            Context.MODE_PRIVATE\r\n        )\r\n\r\n        getSavedPlaces()\r\n    }\r\n\r\n    private fun setupViewPager() {\r\n        binding.pager.addOnPageChangeListener(object : ViewPager2.OnPageChangeCallback(),\r\n            OnPageChangeListener {\r\n            override fun onPageSelected(position: Int) {\r\n            }\r\n\r\n            override fun onPageScrollStateChanged(state: Int) {\r\n                if (state == ViewPager2.SCROLL_STATE_IDLE) {\r\n                    mCustomPagerAdapter.notifyDataSetChanged()\r\n                }\r\n            }\r\n        })\r\n    }\r\n\r\n    private fun setupSearchView() {\r\n        binding.navView.getHeaderView(0).findViewById<SearchView>(R.id.placeName)\r\n            .setOnQueryTextListener(object : SearchView.OnQueryTextListener {\r\n                override fun onQueryTextSubmit(query: String?): Boolean {\r\n                    return true\r\n                }\r\n\r\n                override fun onQueryTextChange(newText: String?): Boolean {\r\n                    if (newText.isNullOrEmpty()) {\r\n                        showRecyclerViews()\r\n                    } else {\r\n                        hideRecyclerViews()\r\n                        filterCityName(newText.toString().uppercase())\r\n                    }\r\n                    return true\r\n                }\r\n            })\r\n    }\r\n\r\n    private fun setupToggle() {\r\n        toggle = ActionBarDrawerToggle(\r\n            requireActivity(),\r\n            binding.myDrawerLayout,\r\n            binding.myToolbar,\r\n            R.string.open,\r\n            R.string.close\r\n        )\r\n        binding.myDrawerLayout.addDrawerListener(toggle)\r\n        toggle.syncState()\r\n    }\r\n\r\n    private fun observeLiveData() {\r\n        val cityNames = extractCityNames()\r\n\r\n        place= cityNames\r\n\r\n        val adapter = CitiesRecyclerViewAdapter(place)\r\n        adapter.setListener(this)\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.filtered_place_recyclerview).adapter = adapter\r\n\r\n        recyclerViewAdapter2 = CitiesRecyclerViewAdapter(place)\r\n        recyclerViewAdapter2!!.setListener(this)\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.filtered_place_recyclerview).adapter = recyclerViewAdapter2\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun hideRecyclerViews() {\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.places_recyclerview).visibility = View.GONE\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.filtered_place_recyclerview).visibility = View.VISIBLE\r\n    }\r\n\r\n    @SuppressLint(\"ClickableViewAccessibility\")\r\n    private fun showRecyclerViews() {\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.places_recyclerview).visibility = View.VISIBLE\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.filtered_place_recyclerview).visibility = View.GONE\r\n    }\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    override fun onHymnClick(citiesModel: String?) {\r\n        if (citiesModel != null) {\r\n            if (mCustomPagerAdapter.count < 10) {\r\n                if (!arrayList.contains(citiesModel.uppercase())) {\r\n                    addCity(citiesModel.uppercase())\r\n                    hideNavDrawer()\r\n                } else {\r\n                    showSnackbar(\"Bu şehri zaten eklediniz.\")\r\n                }\r\n            } else {\r\n                showSnackbar(\"Çok fazla şehir eklediniz.\\n Lütfen şehir silip tekrar deneyiniz.\")\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun addCity(cityName: String) {\r\n        mCustomPagerAdapter.addPage(CityWeatherData.newInstance(cityName))\r\n        binding.pager.currentItem = mCustomPagerAdapter.count\r\n        arrayList.add(cityName)\r\n\r\n        val gson = Gson()\r\n        val json = gson.toJson(arrayList)\r\n        sharedPreferences?.edit()?.putString(\"TAG\", json)?.apply()\r\n\r\n        updateRecyclerViewAdapter()\r\n    }\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private fun updateRecyclerViewAdapter() {\r\n        binding.navView.getHeaderView(0).findViewById<SearchView>(R.id.placeName).setQuery(\"\", false)\r\n        recyclerViewAdapter1 = TempeturesRecyclerViewAdapter(arrayList)\r\n        recyclerViewAdapter1!!.setListener(this)\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.places_recyclerview).adapter = recyclerViewAdapter1\r\n        recyclerViewAdapter1!!.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun showSnackbar(message: String) {\r\n        Snackbar.make(binding.root.rootView, message, Snackbar.LENGTH_LONG).show()\r\n    }\r\n\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    private fun getSavedPlaces() {\r\n        val gson1 = Gson()\r\n        val json1 = sharedPreferences?.getString(\"TAG\", \"\")\r\n        val type: Type = object : TypeToken<List<String?>?>() {}.type\r\n        if (json1 != \"\") {\r\n            arrayList.addAll(gson1.fromJson(json1, type))\r\n            for (a in arrayList) {\r\n                mCustomPagerAdapter.addPage(CityWeatherData.newInstance(a))\r\n                binding.pager.currentItem = 0\r\n                mCustomPagerAdapter.notifyDataSetChanged()\r\n            }\r\n        }\r\n        recyclerViewAdapter1 = TempeturesRecyclerViewAdapter(arrayList)\r\n        recyclerViewAdapter1!!.setListener(this)\r\n        binding.navView.getHeaderView(0).findViewById<RecyclerView>(R.id.places_recyclerview).adapter = recyclerViewAdapter1\r\n        recyclerViewAdapter1!!.notifyDataSetChanged()\r\n    }\r\n\r\n    private fun hideNavDrawer(){\r\n        binding.myDrawerLayout.closeDrawer(GravityCompat.START)\r\n    }\r\n\r\n\r\n    override fun onLongClick(currentPage: Int?) {\r\n        if (currentPage != null) {\r\n            mCustomPagerAdapter.notifyDataSetChanged()\r\n\r\n            val alertDialogBuilder = AlertDialog.Builder(requireContext())\r\n            alertDialogBuilder.setTitle(\"Şehri sil\")\r\n            alertDialogBuilder.setMessage(\"Kayıtlı şehri silmek istediğinizden emin misiniz?\")\r\n\r\n\r\n            alertDialogBuilder.setPositiveButton(\"Evet\") { _, _ ->\r\n                val sharedPreferences = requireActivity().getSharedPreferences(\"com.example.kotlinforecast.view\", Context.MODE_PRIVATE)\r\n                val gson = Gson()\r\n                val json = sharedPreferences.getString(\"TAG\", \"\")\r\n                val type = object : TypeToken<MutableList<String>?>() {}.type\r\n\r\n                val arrayList: MutableList<String> = gson.fromJson(json, type) ?: mutableListOf()\r\n\r\n                if (currentPage < arrayList.size) {\r\n                    arrayList.removeAt(currentPage)\r\n                    val editor = sharedPreferences.edit()\r\n                    editor.putString(\"TAG\", gson.toJson(arrayList))\r\n                    editor.apply()\r\n                }\r\n\r\n                recyclerViewAdapter1?.removeItem(currentPage)\r\n                mCustomPagerAdapter.removePage(currentPage)\r\n            }\r\n\r\n            alertDialogBuilder.setNegativeButton(\"Hayır\") { _, _ ->\r\n\r\n            }\r\n\r\n            val alertDialog = alertDialogBuilder.create()\r\n\r\n            alertDialog.show()\r\n        }\r\n    }\r\n    private fun extractCityNames(): ArrayList<String> {\r\n        val assetManager: AssetManager = context.assets\r\n        val inputStream: InputStream = assetManager.open(\"sehirIsimleri.json\")\r\n        val size: Int = inputStream.available()\r\n        val buffer = ByteArray(size)\r\n        inputStream.read(buffer)\r\n        inputStream.close()\r\n\r\n        val jsonString = String(buffer, Charsets.UTF_8)\r\n\r\n        val jsonObject = JSONObject(jsonString)\r\n        val cityNames = ArrayList<String>()\r\n\r\n        val keys = jsonObject.keys()\r\n        while (keys.hasNext()) {\r\n            val key = keys.next()\r\n            val cityName = jsonObject.getString(key)\r\n            cityNames.add(cityName)\r\n        }\r\n\r\n        return cityNames\r\n    }\r\n    private fun filterCityName(filter: String) {\r\n        val filterers: ArrayList<String> = ArrayList()\r\n        for (item in place) {\r\n            if (item.toLowerCase(Locale(\"tr\")).contains(filter.toLowerCase(Locale(\"tr\"))) ||\r\n                item.replace(\"İ\", \"i\", ignoreCase = true).contains(filter.replace(\"İ\", \"i\", ignoreCase = true))\r\n            ) {\r\n                filterers.add(item)\r\n            }\r\n        }\r\n        if (filterers.isNotEmpty()) {\r\n            recyclerViewAdapter2?.filterList(filterers)\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/MainScreen.kt b/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/MainScreen.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/MainScreen.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/MainScreen.kt	(date 1695746274285)
@@ -22,12 +22,12 @@
 import androidx.recyclerview.widget.RecyclerView
 import androidx.viewpager.widget.ViewPager.*
 import androidx.viewpager2.widget.ViewPager2
-import com.example.kotlinweatherforecast.common.OnHymnClickListener
 import com.example.kotlinweatherforecast.R
+import com.example.kotlinweatherforecast.databinding.FragmentMainScreenBinding
+import com.example.kotlinweatherforecast.common.OnHymnClickListener
 import com.example.kotlinweatherforecast.ui.adapter.CitiesRecyclerViewAdapter
 import com.example.kotlinweatherforecast.ui.adapter.TempeturesRecyclerViewAdapter
 import com.example.kotlinweatherforecast.common.onCliclLongRecyclerView
-import com.example.kotlinweatherforecast.databinding.FragmentMainScreenBinding
 import com.google.android.material.snackbar.Snackbar
 import org.json.JSONObject
 import java.io.InputStream
Index: app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/CityWeatherData.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.ui.fragment\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.os.Bundle\r\nimport android.view.*\r\nimport android.widget.ImageView\r\nimport androidx.fragment.app.Fragment\r\nimport androidx.lifecycle.ViewModelProviders\r\nimport android.widget.TextView\r\nimport com.example.kotlinweatherforecast.R\r\nimport com.example.kotlinweatherforecast.databinding.FragmentCityWeatherDataBinding\r\nimport com.example.kotlinweatherforecast.data.model.WeatherModel\r\nimport java.text.SimpleDateFormat\r\nimport java.util.*\r\nimport com.example.kotlinweatherforecast.ui.viewmodel.WeatherViewModel\r\nimport com.google.android.material.snackbar.Snackbar\r\nimport kotlin.math.roundToInt\r\n\r\nclass CityWeatherData : Fragment() {\r\n    private var _binding: FragmentCityWeatherDataBinding? = null\r\n    private val binding get() = _binding!!\r\n    private lateinit var viewModel: WeatherViewModel\r\n    companion object {\r\n        fun newInstance(cityName: String?): CityWeatherData {\r\n            val fragment = CityWeatherData()\r\n            val args = Bundle()\r\n            args.putString(\"cityName\", cityName)\r\n            fragment.arguments = args\r\n            return fragment\r\n        }\r\n    }\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setHasOptionsMenu(true)\r\n    }\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View {\r\n        _binding = FragmentCityWeatherDataBinding.inflate(inflater, container, false)\r\n        return binding.root\r\n    }\r\n\r\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\r\n        super.onViewCreated(view, savedInstanceState)\r\n        viewModel = ViewModelProviders.of(this)[WeatherViewModel::class.java]\r\n        arguments?.getString(\"cityName\")\r\n            ?.let { viewModel.loadData(it, \"61e8b0259c092b1b9a15474cd800ee25\") }\r\n        observeLiveData()\r\n    }\r\n\r\n    @SuppressLint(\"SetTextI18n\", \"SimpleDateFormat\")\r\n    private fun updateCurrentWeather(weather: WeatherModel) {\r\n        val inputDateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\r\n        val outputDateFormat = SimpleDateFormat(\"EEE, d MMM yyyy\", Locale(\"tr\"))\r\n\r\n        val convertedTime = weather.weatherList[0].dt_txt\r\n        val time: Date = inputDateFormat.parse(convertedTime.toString()) ?: Date()\r\n        val formattedTime = outputDateFormat.format(time)\r\n\r\n        binding.textDay.text = formattedTime\r\n        binding.cityName.text =  weather.city.name.toString().replace(Regex(\" Province$\"), \"\")\r\n        val tempValue = String.format(\"%.1f\", weather.weatherList[0].main?.temp).toDouble()\r\n        binding.textViewTemperature.text = tempValue.toString()\r\n        binding.textHumidity.text = weather.weatherList[0].main?.humidity.toString() + \"%\"\r\n        binding.textPressure.text = weather.weatherList[0].main?.pressure.toString() + \"hPa\"\r\n        binding.textWind.text = ((weather.weatherList[0].wind?.speed)?.times(3.6)?.roundToInt()).toString() +\"km/h\"\r\n        uploadWeatherIcon(0, weather.weatherList[0].weather!![0].icon.toString())\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\", \"SetTextI18n\")\r\n    private fun updateHourlyWeather(weather: WeatherModel) {\r\n        val inputDateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\r\n        val outputDateFormat = SimpleDateFormat(\"HH:mm\")\r\n\r\n        for (i in 1 until 9) {\r\n            val tempTextView: TextView = requireView().findViewById(textViewIds[i - 1]) as TextView\r\n            val timeTextView: TextView = requireView().findViewById(textTimeIds[i - 1]) as TextView\r\n\r\n            val convertedTime = weather.weatherList[i].dt_txt\r\n            val time: Date = inputDateFormat.parse(convertedTime.toString()) ?: Date()\r\n            val formattedTime = outputDateFormat.format(time)\r\n\r\n            tempTextView.text = weather.weatherList[i].main?.temp.toString().substringBefore(\".\") + \"°C\"\r\n            timeTextView.text = formattedTime\r\n            uploadWeatherIcon(i, weather.weatherList[i].weather!![0].icon.toString())\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"SimpleDateFormat\", \"SetTextI18n\")\r\n    private fun updateDailyWeather(weather: WeatherModel) {\r\n        var dayIndex = 0\r\n        val inputDateFormat = SimpleDateFormat(\"yyyy-MM-dd HH:mm\")\r\n\r\n        for (x in 0 until weather.weatherList.size) {\r\n            val convertedTime = weather.weatherList[x].dt_txt\r\n            val time: Date = inputDateFormat.parse(convertedTime.toString()) ?: Date()\r\n            val formattedTime = SimpleDateFormat(\"HH:mm\").format(time)\r\n\r\n            val convertedDay = weather.weatherList[x].dt_txt\r\n            val day: Date = inputDateFormat.parse(convertedDay.toString()) ?: Date()\r\n            val formattedDay = SimpleDateFormat(\"EEEE\",Locale(\"tr\")).format(day)\r\n\r\n            if (formattedTime == \"12:00\") {\r\n                val dayTextView: TextView = requireView().findViewById(textDayIds[dayIndex]) as TextView\r\n                val tempTextView: TextView = requireView().findViewById(textMinTempIds[dayIndex]) as TextView\r\n\r\n                dayTextView.text = formattedDay\r\n                tempTextView.text = weather.weatherList[x].main?.temp.toString().substringBefore(\".\") + \"°C\"\r\n                uploadWeatherIcon(dayIndex + 10, weather.weatherList[x].weather!![0].icon.toString())\r\n\r\n                dayIndex++\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun observeLiveData() {\r\n        viewModel.weathers.observe(viewLifecycleOwner) { weather ->\r\n            weather?.let {\r\n                updateCurrentWeather(weather)\r\n                updateHourlyWeather(weather)\r\n                updateDailyWeather(weather)\r\n            }\r\n        }\r\n\r\n        viewModel.error.observe(viewLifecycleOwner) { error ->\r\n            if (error == null) {\r\n                viewModel.weathers.removeObservers(viewLifecycleOwner)\r\n                Snackbar.make(binding.root.rootView, \"Lütfen internet bağlantınızı kontrol edin.\", Snackbar.LENGTH_LONG).show()\r\n            }\r\n        }\r\n    }\r\n\r\n    private fun uploadWeatherIcon(index: Int, iconId: String) {\r\n        val imageResource: ImageView? = when (index) {\r\n            0 -> binding.mainTempImage\r\n            1 -> binding.imageViewTemp1\r\n            2 -> binding.imageViewTemp2\r\n            3 -> binding.imageViewTemp3\r\n            4 -> binding.imageViewTemp4\r\n            5 -> binding.imageViewTemp5\r\n            6 -> binding.imageViewTemp6\r\n            7 -> binding.imageViewTemp7\r\n            8 -> binding.imageViewTemp8\r\n            10 -> binding.imageViewTemp10\r\n            11 -> binding.imageViewTemp11\r\n            12 -> binding.imageViewTemp12\r\n            13 -> binding.imageViewTemp13\r\n            14 -> binding.imageViewTemp14\r\n            else -> null\r\n        }\r\n\r\n        when (iconId) {\r\n            \"01d\" -> imageResource?.setImageResource(R.drawable.sunny)\r\n            \"01n\" -> imageResource?.setImageResource(R.drawable.night)\r\n            \"02d\" -> imageResource?.setImageResource(R.drawable.partlycloudyday)\r\n            \"02n\" -> imageResource?.setImageResource(R.drawable.partlycloudydaynight)\r\n            \"03d\", \"03n\" -> {\r\n                imageResource?.setImageResource(R.drawable.cloud)\r\n                imageResource?.setImageResource(R.drawable.cloudy)\r\n            }\r\n            \"04d\", \"04n\" -> imageResource?.setImageResource(R.drawable.cloudy)\r\n            \"09d\", \"09n\" -> imageResource?.setImageResource(R.drawable.freezingrain)\r\n            \"10d\" -> imageResource?.setImageResource(R.drawable.heavyrainswrsday)\r\n            \"10n\" -> imageResource?.setImageResource(R.drawable.heavyrainswrsdaynight)\r\n            \"11d\", \"11n\" -> imageResource?.setImageResource(R.drawable.cloudrainthunder)\r\n            \"13d\", \"13n\" -> imageResource?.setImageResource(R.drawable.occlightsnow)\r\n            \"50d\", \"50n\" -> imageResource?.setImageResource(R.drawable.freezingfog)\r\n            else -> imageResource?.setImageResource(R.drawable.notfound)\r\n        }\r\n    }\r\n\r\n    // XML id's\r\n    private val textViewIds = intArrayOf(\r\n        R.id.tempeture2,\r\n        R.id.tempeture3,\r\n        R.id.tempeture4,\r\n        R.id.tempeture5,\r\n        R.id.tempeture6,\r\n        R.id.tempeture7,\r\n        R.id.tempeture8,\r\n        R.id.tempeture9\r\n    )\r\n\r\n    private val textTimeIds = intArrayOf(\r\n        R.id.time2,\r\n        R.id.time3,\r\n        R.id.time4,\r\n        R.id.time5,\r\n        R.id.time6,\r\n        R.id.time7,\r\n        R.id.time8,\r\n        R.id.time9\r\n    )\r\n\r\n    private val textDayIds = intArrayOf(\r\n        R.id.firstDay1,\r\n        R.id.firstDay2,\r\n        R.id.firstDay3,\r\n        R.id.firstDay4,\r\n        R.id.firstDay5\r\n    )\r\n\r\n    private val textMinTempIds = intArrayOf(\r\n        R.id.firstMinTemp1,\r\n        R.id.firstMinTemp2,\r\n        R.id.firstMinTemp3,\r\n        R.id.firstMinTemp4,\r\n        R.id.firstMinTemp5\r\n    )\r\n\r\n    private val tempDaysImages = intArrayOf(\r\n        R.id.imageViewTemp10,\r\n        R.id.imageViewTemp11,\r\n        R.id.imageViewTemp12,\r\n        R.id.imageViewTemp13,\r\n        R.id.imageViewTemp14\r\n    )\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/CityWeatherData.kt b/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/CityWeatherData.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/CityWeatherData.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/ui/fragment/CityWeatherData.kt	(date 1695746274291)
@@ -7,19 +7,22 @@
 import androidx.fragment.app.Fragment
 import androidx.lifecycle.ViewModelProviders
 import android.widget.TextView
+import com.example.kotlinweatherforecast.BuildConfig
 import com.example.kotlinweatherforecast.R
-import com.example.kotlinweatherforecast.databinding.FragmentCityWeatherDataBinding
 import com.example.kotlinweatherforecast.data.model.WeatherModel
+import com.example.kotlinweatherforecast.databinding.FragmentCityWeatherDataBinding
 import java.text.SimpleDateFormat
 import java.util.*
 import com.example.kotlinweatherforecast.ui.viewmodel.WeatherViewModel
 import com.google.android.material.snackbar.Snackbar
 import kotlin.math.roundToInt
 
+@Suppress("DEPRECATION")
 class CityWeatherData : Fragment() {
     private var _binding: FragmentCityWeatherDataBinding? = null
     private val binding get() = _binding!!
     private lateinit var viewModel: WeatherViewModel
+    val API_KEY  = BuildConfig.API_KEY
     companion object {
         fun newInstance(cityName: String?): CityWeatherData {
             val fragment = CityWeatherData()
@@ -46,7 +49,7 @@
         super.onViewCreated(view, savedInstanceState)
         viewModel = ViewModelProviders.of(this)[WeatherViewModel::class.java]
         arguments?.getString("cityName")
-            ?.let { viewModel.loadData(it, "61e8b0259c092b1b9a15474cd800ee25") }
+            ?.let { viewModel.loadData(it, API_KEY) }
         observeLiveData()
     }
 
@@ -67,6 +70,7 @@
         binding.textPressure.text = weather.weatherList[0].main?.pressure.toString() + "hPa"
         binding.textWind.text = ((weather.weatherList[0].wind?.speed)?.times(3.6)?.roundToInt()).toString() +"km/h"
         uploadWeatherIcon(0, weather.weatherList[0].weather!![0].icon.toString())
+
     }
 
     @SuppressLint("SimpleDateFormat", "SetTextI18n")
Index: app/src/main/java/com/example/kotlinweatherforecast/ui/activity/SplashScreenActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.ui.activity\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.content.Intent\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.os.Handler\r\nimport android.view.animation.AnimationUtils\r\nimport com.bumptech.glide.Glide\r\nimport com.example.kotlinweatherforecast.R\r\nimport com.example.kotlinweatherforecast.databinding.ActivitySplashScreenBinding\r\n\r\n@SuppressLint(\"CustomSplashScreen\")\r\nclass SplashScreenActivity : AppCompatActivity() {\r\n    private lateinit var binding: ActivitySplashScreenBinding\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        binding = ActivitySplashScreenBinding.inflate(layoutInflater)\r\n        val view = binding.root\r\n        setContentView(view)\r\n\r\n        val topAnimation = AnimationUtils.loadAnimation(this, R.anim.top_anim)\r\n\r\n        binding.imageView.startAnimation(topAnimation)\r\n        Glide.with(this).load(R.drawable.weathergif).into(binding.imageView)\r\n\r\n        Handler().postDelayed({\r\n            val intent = Intent(this@SplashScreenActivity, MainActivity::class.java)\r\n            startActivity(intent)\r\n            finish()\r\n        },4000)\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/ui/activity/SplashScreenActivity.kt b/app/src/main/java/com/example/kotlinweatherforecast/ui/activity/SplashScreenActivity.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/ui/activity/SplashScreenActivity.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/ui/activity/SplashScreenActivity.kt	(date 1695746274301)
@@ -10,6 +10,7 @@
 import com.example.kotlinweatherforecast.R
 import com.example.kotlinweatherforecast.databinding.ActivitySplashScreenBinding
 
+
 @SuppressLint("CustomSplashScreen")
 class SplashScreenActivity : AppCompatActivity() {
     private lateinit var binding: ActivitySplashScreenBinding
Index: app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/CitiesRecyclerViewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.ui.adapter\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.kotlinweatherforecast.databinding.CitiesanddistrictsRowLayoutBinding\r\nimport com.example.kotlinweatherforecast.common.OnHymnClickListener\r\n\r\nclass CitiesRecyclerViewAdapter(private var places:ArrayList<String>) : RecyclerView.Adapter<CitiesRecyclerViewAdapter.RowHolder>() {\r\n    private var listener: OnHymnClickListener? = null\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    fun filterList(filtered:ArrayList<String>) {\r\n        places= filtered\r\n        notifyDataSetChanged()\r\n    }\r\n\r\n    fun setListener(listener: OnHymnClickListener){\r\n        this.listener = listener\r\n    }\r\n\r\n    class RowHolder(val binding: CitiesanddistrictsRowLayoutBinding) : RecyclerView.ViewHolder(binding.root)\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RowHolder {\r\n        val binding = CitiesanddistrictsRowLayoutBinding.inflate(LayoutInflater.from(parent.context),parent,false)\r\n        return RowHolder(binding)\r\n    }\r\n\r\n    override fun onBindViewHolder(holder: RowHolder, position: Int) {\r\n        holder.binding.districtOrCityName.text =places[position].uppercase()\r\n\r\n        holder.itemView.setOnClickListener {\r\n            if (listener != null) {\r\n                listener!!.onHymnClick(places[position])\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return places.count()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/CitiesRecyclerViewAdapter.kt b/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/CitiesRecyclerViewAdapter.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/CitiesRecyclerViewAdapter.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/CitiesRecyclerViewAdapter.kt	(date 1695746274308)
@@ -4,8 +4,8 @@
 import android.view.LayoutInflater
 import android.view.ViewGroup
 import androidx.recyclerview.widget.RecyclerView
-import com.example.kotlinweatherforecast.databinding.CitiesanddistrictsRowLayoutBinding
 import com.example.kotlinweatherforecast.common.OnHymnClickListener
+import com.example.kotlinweatherforecast.databinding.CitiesanddistrictsRowLayoutBinding
 
 class CitiesRecyclerViewAdapter(private var places:ArrayList<String>) : RecyclerView.Adapter<CitiesRecyclerViewAdapter.RowHolder>() {
     private var listener: OnHymnClickListener? = null
Index: app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/TempeturesRecyclerViewAdapter.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.kotlinweatherforecast.ui.adapter\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.view.LayoutInflater\r\nimport android.view.ViewGroup\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.example.kotlinweatherforecast.databinding.RowLayoutBinding\r\n\r\nimport com.example.kotlinweatherforecast.common.onCliclLongRecyclerView\r\n\r\n\r\nclass TempeturesRecyclerViewAdapter(private var placeName: ArrayList<String>) : RecyclerView.Adapter<TempeturesRecyclerViewAdapter.RowHolder>(){\r\n    private var listener: onCliclLongRecyclerView? = null\r\n\r\n    fun setListener(listener: onCliclLongRecyclerView){\r\n        this.listener = listener\r\n    }\r\n    class RowHolder(val binding: RowLayoutBinding) : RecyclerView.ViewHolder(binding.root)\r\n\r\n    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): RowHolder {\r\n        val binding = RowLayoutBinding.inflate(LayoutInflater.from(parent.context),parent,false)\r\n        return RowHolder(binding)\r\n    }\r\n\r\n    override fun getItemCount(): Int {\r\n        return placeName.count()\r\n    }\r\n\r\n    @SuppressLint(\"ResourceType\", \"SetTextI18n\", \"NotifyDataSetChanged\")\r\n    override fun onBindViewHolder(holder: RowHolder, @SuppressLint(\"RecyclerView\") position: Int) {\r\n\r\n        holder.binding.name.setOnLongClickListener {\r\n            if (listener != null) {\r\n                listener!!.onLongClick(position)\r\n            }\r\n            true\r\n        }\r\n\r\n        holder.binding.name.text = placeName[position]\r\n    }\r\n    @SuppressLint(\"NotifyDataSetChanged\")\r\n    fun removeItem(position: Int) {\r\n        placeName.removeAt(position)\r\n        notifyDataSetChanged()\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/TempeturesRecyclerViewAdapter.kt b/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/TempeturesRecyclerViewAdapter.kt
--- a/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/TempeturesRecyclerViewAdapter.kt	(revision aab3197e9215a38e632fe917e0dc21c8a388676b)
+++ b/app/src/main/java/com/example/kotlinweatherforecast/ui/adapter/TempeturesRecyclerViewAdapter.kt	(date 1695746274315)
@@ -4,9 +4,9 @@
 import android.view.LayoutInflater
 import android.view.ViewGroup
 import androidx.recyclerview.widget.RecyclerView
-import com.example.kotlinweatherforecast.databinding.RowLayoutBinding
 
 import com.example.kotlinweatherforecast.common.onCliclLongRecyclerView
+import com.example.kotlinweatherforecast.databinding.RowLayoutBinding
 
 
 class TempeturesRecyclerViewAdapter(private var placeName: ArrayList<String>) : RecyclerView.Adapter<TempeturesRecyclerViewAdapter.RowHolder>(){
